{"version":3,"sources":["Counter/Сounter.tsx","CustomCounter/CustomСounter.tsx","state/counterReducer.ts","state/CustomCounterReducer.ts","App.tsx","reportWebVitals.ts","state/store.ts","utils/localStorage.ts","index.tsx","CustomCounter/CustomCounter.module.css","Counter/Counter.module.css"],"names":["Counter","props","valueMax","presentValue","value","className","s","outer_contour","counter","display","buttons","button","onClick","incButton","disabled","resetButton","CustomCounter","valueStart","headDisplay","type","min","max","onChange","e","parseMaxValue","JSON","parse","currentTarget","maxValue","parseStartValue","setValueStart","startValue","initState","App","dispatch","useDispatch","useSelector","state","customCounter","getState","startValueC","valueS","maxValueTC","parseValue","setStartValueC","resetValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","err","LoadState","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","window","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.8e4983fe.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './Counter.module.css'\r\n\r\ntype CounterPropsType = {\r\n    value: number\r\n    incButton: () => void\r\n    resetButton: () => void\r\n    valueMax: number\r\n}\r\n\r\nconst Counter: React.FC<CounterPropsType> = (props) => {\r\n    const valueMax = props.valueMax\r\n    const presentValue = props.value\r\n\r\n    const incButton = () => presentValue < valueMax ? props.incButton() : ''\r\n    const resetButton = () => props.resetButton()\r\n\r\n    return (\r\n        <div className={s.outer_contour}>\r\n            <div className={s.counter}>\r\n                <div className={s.display}>{presentValue}</div>\r\n            </div>\r\n            <div className={s.buttons}>\r\n                <button className={s.button} onClick={incButton} disabled={presentValue === valueMax}>inc</button>\r\n                <button className={s.button} onClick={resetButton} disabled={presentValue === 0}>reset</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Counter;\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './CustomCounter.module.css'\r\n\r\ntype CustomCounterPropsType = {\r\n    startValue: () => void\r\n    maxValue: (valueS: number) => void\r\n    valueStart: number\r\n    valueMax: number\r\n    setValueStart: (parseValue: number) => void\r\n}\r\n\r\nconst CustomCounter: React.FC<CustomCounterPropsType> = (props) => {\r\nlet valueStart=props.valueStart\r\nlet valueMax=props.valueMax\r\n    const onChangeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let parseMaxValue = JSON.parse(e.currentTarget.value)\r\n        props.maxValue(parseMaxValue)\r\n    }\r\n\r\n    const onChangeStartHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let parseStartValue = JSON.parse(e.currentTarget.value)\r\n        props.setValueStart(parseStartValue)\r\n    }\r\n\r\n    const setButton = () => {\r\n        props.startValue()\r\n    }\r\n\r\n    return (\r\n        <div className={s.outer_contour}>\r\n\r\n            <div className={s.counter}>\r\n                <div className={s.headDisplay}>\r\n                    <h3>max value:</h3>\r\n                    <input className={s.display} value={valueMax} type={\"number\"} min={0} max={24}\r\n                           onChange={onChangeMaxValueHandler}/>\r\n                </div>\r\n                <div className={s.headDisplay}>\r\n                    <h3>start value:</h3>\r\n                    <input className={s.display} value={valueStart} type={\"number\"} min={0} max={24}\r\n                           onChange={onChangeStartHandler}/>\r\n                </div>\r\n            </div>\r\n            <div className={s.buttons}>\r\n                <button className={s.button} onClick={setButton} disabled={valueStart >= valueMax}>set</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomCounter;\r\n","import {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type CountValueActionType = {\r\n    type: 'VALUE',\r\n    value: number,\r\n}\r\nexport type IncValueActionType = {\r\n    type: 'INC_VALUE',\r\n    value: number,\r\n}\r\nexport type ResetValueActionType = {\r\n    type: 'RESET_VALUE',\r\n    value: number,\r\n}\r\ntype ActionType = CountValueActionType | IncValueActionType | ResetValueActionType\r\ntype InitStateType = typeof initState\r\n\r\nconst initState = {\r\n    value: 0\r\n}\r\n\r\nexport const counterReducer = (state: InitStateType = initState, action: ActionType): InitStateType => {\r\n    switch (action.type) {\r\n        case 'VALUE': {\r\n            return {\r\n                ...state,\r\n                value: action.value\r\n            }\r\n        }\r\n        case 'INC_VALUE': {\r\n            return {\r\n                ...state,\r\n                value: ++state.value\r\n            }\r\n        }\r\n        case 'RESET_VALUE': {\r\n            return {\r\n                ...state,\r\n                value: action.value\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//Action\r\nexport const startValueC = (value: number) => ({type: 'VALUE', value} as const)\r\nexport const incValue = () => ({type: 'INC_VALUE'} as const)\r\nexport const resetValue = (value: number) => ({type: 'RESET_VALUE', value} as const)\r\n\r\n//Thunk\r\nexport const incValuesTC = () => (dispatch: Dispatch) => {\r\n    dispatch(incValue())\r\n}\r\nexport const startValueFromLocalStorageTC = () => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    let value = getState().customCounter.valueStart\r\n    dispatch(startValueC(value))\r\n}\r\nexport const resetValueTC=()=>(dispatch:Dispatch,getState: () => AppRootStateType)=>{\r\n    let value=getState().customCounter.valueStart\r\n    dispatch(resetValue(value))\r\n}\r\n","import {Dispatch} from \"redux\";\r\n\r\ntype ActionType = StartValueActionType | MaxValueActionType\r\nexport type StartValueActionType = {\r\n    type: 'START_VALUE',\r\n    valueS: number,\r\n}\r\nexport type MaxValueActionType = {\r\n    type: 'MAX_VALUE',\r\n    maxValue: number,\r\n}\r\ntype InitStateType = typeof initState\r\n\r\nconst initState = {\r\n    valueMax: 24,\r\n    valueStart:0,\r\n}\r\n\r\nexport const customCounterReducer = (state: InitStateType = initState, action: ActionType): InitStateType => {\r\n    switch (action.type) {\r\n        case 'START_VALUE': {\r\n            return {\r\n                ...state,\r\n                valueStart: action.valueS\r\n            }\r\n        }\r\n        case 'MAX_VALUE': {\r\n            return {\r\n                ...state,\r\n                valueMax: action.maxValue\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//Action\r\nexport const setStartValueC = (valueS: number) => ({type: 'START_VALUE', valueS} as const)\r\nexport const maxValueC = (maxValue: number) => ({type: 'MAX_VALUE', maxValue} as const)\r\n\r\n//Thunk\r\nexport const setStartValueTC=(valueS:number)=>(dispatch:Dispatch)=>{\r\n    dispatch(setStartValueC(valueS))\r\n}\r\nexport const maxValueTC=(valueS:number)=>(dispatch:Dispatch)=>{\r\n    dispatch(maxValueC(valueS))\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Counter from \"./Counter/Сounter\";\r\nimport CustomCounter from \"./CustomCounter/CustomСounter\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {incValuesTC, startValueFromLocalStorageTC, resetValueTC,} from \"./state/counterReducer\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {maxValueTC, setStartValueTC} from \"./state/CustomCounterReducer\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const value = useSelector<AppRootStateType, number>(state => state.counter.value)\r\n    const valueMax = useSelector<AppRootStateType, number>(state => state.customCounter.valueMax)\r\n    const valueStart = useSelector<AppRootStateType, number>(state => state.customCounter.valueStart)\r\n\r\n    const setValueStart = (parseValue: number) => {\r\n        dispatch(setStartValueTC(parseValue))\r\n    }\r\n\r\n    const incButton = () => {\r\n        dispatch(incValuesTC())\r\n    }\r\n\r\n    const resetButton = () => {\r\n        dispatch(resetValueTC())\r\n    }\r\n\r\n    const startValue = () => {\r\n        dispatch(startValueFromLocalStorageTC())\r\n\r\n    }\r\n\r\n    const maxValue = (valueS: number) => {\r\n        dispatch(maxValueTC(valueS))\r\n    }\r\n\r\n    return (<div className={'position'}>\r\n            <CustomCounter startValue={startValue}\r\n                           maxValue={maxValue}\r\n                           valueStart={valueStart}\r\n                           setValueStart={setValueStart}\r\n                           valueMax={valueMax}\r\n            />\r\n            <Counter\r\n                value={value}\r\n                valueMax={valueMax}\r\n                incButton={incButton}\r\n                resetButton={resetButton}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {counterReducer} from \"./counterReducer\";\r\nimport {customCounterReducer} from \"./CustomCounterReducer\";\r\nimport {LoadState, saveState} from \"../utils/localStorage\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter:counterReducer,\r\n    customCounter:customCounterReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer,LoadState(),applyMiddleware(thunk));\r\n\r\nstore.subscribe(()=>{\r\n    saveState({\r\n        counter:store.getState().counter,\r\n        customCounter:store.getState().customCounter,\r\n    })\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","//https://medium.com/@jrcreencia/persisting-redux-state-to-local-storage-f81eb0b90e7e\r\n\r\n//загрузка состояния из localStorage\r\nimport {AppRootStateType} from \"../state/store\";\r\n\r\nexport const LoadState = () => {\r\n  try{\r\n      const serializedState=localStorage.getItem('app-state')\r\n      if(serializedState===null){\r\n          return undefined\r\n      }\r\n      return JSON.parse(serializedState)\r\n  }catch (err){\r\n      return undefined\r\n  }\r\n}\r\n\r\n// сохранение состояния в localStorage\r\nexport const saveState = (state:AppRootStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from \"./state/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n    <App />\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outer_contour\":\"CustomCounter_outer_contour__1Xvk5\",\"circuit\":\"CustomCounter_circuit__2Tluf\",\"counter\":\"CustomCounter_counter__2PHgL\",\"headDisplay\":\"CustomCounter_headDisplay__17VsI\",\"display\":\"CustomCounter_display__2HTC5\",\"buttons\":\"CustomCounter_buttons__Dq1iK\",\"button\":\"CustomCounter_button__29adV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outer_contour\":\"Counter_outer_contour__3RK8I\",\"circuit\":\"Counter_circuit__1kblt\",\"display\":\"Counter_display__3rhns\",\"buttons\":\"Counter_buttons__1eoYW\",\"button\":\"Counter_button__3FeC0\"};"],"sourceRoot":""}